{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForms.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","to","title","aboutThis","onClick","toggleMode","htmlFor","TextForms","useState","text","setText","textDetails","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","words","split","result","i","includes","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","getSelection","removeAllRanges","ntext","join","filter","elements","defaultProps","Alert","height","alert","class","role","word","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fa13a493.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport default function About(props) {\r\n    // const [myStyle, setMyStyle]=useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white' \r\n    //  });\r\n    let myStyle={\r\n        color: props.mode===\"dark\"?\"white\":\"#042743\",\r\n        backgroundColor: props.mode===\"dark\"?\"#042743\":\"white\",\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 className=\"my-3\">About</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    <strong>Analyze your text</strong> \r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    Text Utils is a text utility app made to manipulate text.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    <strong>Free to use</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    <strong>Browser compatible</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutThis}</Link>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            {/* <button class=\"button button5\">50%</button> */}\r\n\r\n            <div className={`form-check form-switch text-${props.mode===\"light\"? \"dark\":\"light\"}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode===\"light\"? \"Enable DarkMode\":\"Disable DarkMode\"}</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n      </nav>\r\n    )\r\n}\r\nNavbar.propTypes= {\r\n    title: PropTypes.string.isRequired,\r\n    aboutThis: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps= {\r\n    title: \"set title\" ,\r\n    aboutThis: \"Set About\"\r\n};","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nexport default function TextForms(props) {\r\n    \r\n    const [text,setText]=useState(\"\");\r\n\r\n    const handleUpClick= ()=>{\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to upper Case\",\"success\");\r\n    }\r\n    const handleLoClick= ()=>{\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case\",\"success\");\r\n\r\n    }\r\n    const handleEmClick = ()=> {\r\n        let words= text.split(\" \");\r\n        let result= function() {\r\n            for (let i = 0; i < words.length; i++) {\r\n                if(words[i].includes('@')===true)\r\n                {\r\n                    return words[i];\r\n                }            \r\n            }\r\n            return \"Email not Found\";\r\n        }\r\n        props.showAlert(`Email Address: ${result()}`,result()===\"Email not Found\"?\"warning\":\"success\");\r\n        \r\n    }\r\n    const handleCopyClick = ()=>{\r\n        let text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        text.setSelectionRange(0, 9999);\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Copied to Clipboard\",\"success\")\r\n    }\r\n    const handleExtraClick = ()=>{\r\n        let ntext=text.split(/[ ]+/);\r\n        setText(ntext.join(\" \"));\r\n        props.showAlert(\"Extra Spaces Remove\",\"success\");\r\n    }\r\n    const handleOnChange= (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container my-3\" style={{color: props.mode===\"dark\"? 'white':\"black\"}}>\r\n            <h1>{props.textDetails}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} style={{backgroundColor: props.mode===\"dark\"? '#042743':\"white\", color: props.mode===\"dark\"? 'white':\"black\"}} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert To LowerCase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleEmClick}>Find Email</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopyClick}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraClick}>Clear Extra Spaces</button>\r\n\r\n\r\n        </div>\r\n\r\n        <div className=\"container my3\" style={{color: props.mode===\"dark\"? 'white':\"black\"}}>\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.split(/\\s+/).filter((elements)=>{ return elements.length!==0 }).length} words, {text.length} characters.</p>\r\n            <p>It can be read in {0.008*text.split(\" \").filter((elements)=>{ return elements.length!==0 }).length} minutes.</p>\r\n            <h2>Preview</h2>\r\n            <p>{ text.length===0?\"Enter text to see the preview.\": text }</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nTextForms.propTypes={\r\n    textDetails: PropTypes.string.isRequired\r\n}\r\n\r\nTextForms.defaultProps= {\r\n    textDetails: \"Text Area\"\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    let capitalize=(word)=>{\r\n        let text=word.toLowerCase();\r\n\r\n        return text.charAt(0).toUpperCase()+text.slice(1);\r\n    };\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForms from './components/TextForms';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode]=useState(\"light\");\n\n  const [alert,setAlert]=useState(null);\n\n  const showAlert= (message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },3000);\n  }\n\n  const toggleMode=()=>{\n    if (mode===\"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor='#042743';\n      showAlert(\"Dark Mode Enabled\",\"success\")\n    }\n    else{\n      setMode(\"light\");\n      document.body.style.backgroundColor='white';\n      showAlert(\"Dark Mode Disabled\",\"success\")\n\n    }\n  };\n\n  return (\n    <>\n      <Router>\n\n      <Navbar title=\"TextUtils\" aboutThis=\"About\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode}/>\n          </Route>\n          <Route exact path=\"/\">\n          <TextForms showAlert={showAlert} textDetails=\"TextUtils - Word Counter | Character counter\" mode={mode}/>\n          </Route>\n        </Switch>\n      </div>\n      {/* <About/> */}\n      </Router>\n\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}